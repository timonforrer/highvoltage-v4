---
import Layout from '../layouts/Layout.astro'
import Icon from '../components/Icon.astro';

import { getSanityData } from '../lib/sanity';
import { gallery as galleryQuery } from '../lib/queries';
import { removeMultiSlash } from '../lib/utils';

import Image from "../components/Image.astro";
import { t } from '../lib/translations';

export async function getStaticPaths() {
  const allGalleryPages = await getSanityData({query: galleryQuery});

  return allGalleryPages.map(gallery => {
    return gallery.images.map((page, index) => {
      const previous = gallery.images[index-1];
      const next = gallery.images[index+1];
      let { slug: { current: slug } } = gallery.meta;
      slug = slug + '/' + page.image.asset.assetId;
      slug = slug === "/" ? undefined : removeMultiSlash(slug, {'removeTrailing': true});
      return {
        params: {
          gallerySubSlug: slug,
        },
        props: {
          gallery,
          next,
          page,
          previous,
        }
      }
    });
  });
};

const {
  gallery,
  next,
  page,
  previous,
} = Astro.props;

const lang = gallery.__i18n_lang;

const rootUrl = removeMultiSlash(gallery.meta.slug.current);
const rootUrlWithHash = `${rootUrl}#${page.image.asset.assetId}`;
const previousUrl = previous
  && removeMultiSlash(`${rootUrl}/${previous.image.asset.assetId}`);
const nextUrl = next
  && removeMultiSlash(`${rootUrl}/${next.image.asset.assetId}`);

---

<Layout title={gallery.meta.title} lang={lang} nonav="true">
  
  <div class="pin no-pointer-events"
    data-asset-id={page.image.asset.assetId}
    data-previous-url={previousUrl}
    data-next-url={nextUrl}
    data-close-url={rootUrl}
    >
    <div class="controls">
      <div class="close pin">
        <a
          class="button button--light button--rounded button--outlined"
          title={t('backToImageOverview', lang, 'capitalize')}
          href={rootUrlWithHash}
          data-root-url={rootUrl}>
          <Icon name="x"></Icon>
        </a>
      </div>
      <div class="previous">
      { previousUrl &&
        <a
          class="button button--light button--rounded"
          href={removeMultiSlash(previousUrl)}
          title={t('previousImage', lang, 'capitalize')}>
          <Icon class="flip" name="chevron"></Icon>
        </a> }
      </div>
      <div class="next">
      { nextUrl &&
        <a
          class="button button--light button--rounded"
          href={removeMultiSlash(nextUrl)}
          title={t('nextImage', lang, 'capitalize')}>
          <Icon name="chevron"></Icon>
        </a> }
      </div>
      {
        page.credits &&
        <div class="pin credits">
          <p class="uppercase tight">
            {t('photoBy', lang, 'capitalize')}
            <a href={page.credits.url}>{page.credits.title}</a>
          </p>
        </div>
      }
    </div>
  </div>
  <Image
    class="max-image"
    image={page.image}
    sizes="100vw"
  ></Image>
</Layout>

<style lang="scss" is:global>
  .controls {
    height: 100%;
    position: relative;

    p, a {
      pointer-events: initial;
    }

    .credits {
      align-items: flex-end;
      display: flex;
      opacity: 0.75;
      & > * {
        background: linear-gradient(transparent, black 60%);
        flex-grow: 1;
        padding: var(--space-s);
      }
    }

    .button {
      margin: var(--space-s);
      position: relative;
    }

    .previous,
    .next {
      align-items: center;
      bottom: 0;
      display: flex;
      height: 100%;
      position: absolute;
      top: 0;
    }

    .close {
      background: radial-gradient(circle at top right, black 0, transparent 120px);
      a {
        float: right;
      }
    }
    
    .previous {
      left: 0;
    }

    .next {
      right: 0;
    }
  }

  .max-image {
    height: 100vh;
    height: 100svh;

    img {
      height: 100%;
      object-fit: contain;
      width: 100%;
    }
  }
</style>

<script>
  const dataNode = document.querySelector('[data-asset-id]');

  const {
    nextUrl,
    previousUrl
  } = dataNode.dataset;

  document.addEventListener('keydown', event => {
    switch (event.key) {
      case 'ArrowRight':
        nextUrl !== undefined && (window.location.href = nextUrl);
        break;
      case 'ArrowLeft':
        previousUrl !== undefined && (window.location.href = previousUrl);
        break;
      default:
        break;
    }
  })
</script>
