---
const {
  lang
} = Astro.props;
---
<cart-items data-lang={lang}></cart-items>

<style lang="scss" is:global>
  cart-items {
    ul {
      list-style: none;
      padding: 0;
    }
  }
  .total {
    text-align: right;
  }
  cart-item,
  cart-items .total {
    display: grid;
    gap: var(--space-2xs) var(--space-xs);
  }
  cart-item {
    grid-template-columns: 5fr 3fr 1fr;
  }
  cart-items .total {
    grid-template-columns: 8fr 1fr;
  }
  cart-item {
    .controls {
      display: flex;
      justify-content: flex-end;
      button + button {
        margin-inline-start: 1em;
      }
      button[disabled=true] {
        opacity: 0.5;
        cursor: not-allowed;
      }
      button[data-operator=remove] {
        background-color: #b91c1c;
        color: white;
        svg {
          width: 0.95em;
        }
        &:hover {
          background-color: var(--color-dark-lighter);
        }
      }
      span {
        display: inline-block;
        font-variant-numeric: tabular-nums;
        min-width: 2em;
        text-align: center;
      }
      button > svg:first-child,
      button > svg:last-child {
        margin-inline: initial;
        margin-block: initial;
      }
    }
    .price {
      text-align: right;
    }
  }
  @media screen and (max-width: 760px) {
    cart-item,
    cart-items .total {
      grid-template-columns: repeat(2, 3fr) 2fr;
      .title,
      b {
        grid-area: 1 / 1 / 2 / 3;
      }
      .controls {
        justify-content: flex-start;
        grid-area: 2 / 1 / 3 / 3;
      }
      .price,
      span {
        grid-area: 1 / 3 / 3 / 4;
      }
    }
  }
</style>

<script>
  import { getStorage, removeSku, updateSku } from '../../lib/localStorage';
  import { render, replacer } from '../../lib/utils';
  import { trashCanIcon } from '../../lib/icons';
  import { t } from '../../lib/translations';

  class CartItems extends HTMLElement {

    async connectedCallback() {
      const response = await fetch(`/api/get-stock`);
      const { stock } = await response.json();

      document.addEventListener('modifiedCart', () => this.renderCart(stock), false);
      this.renderCart(stock);
    }

    renderCart(stock) {
      const ul = this.querySelector('ul');
      const total = this.querySelector('p.total');
      if (ul && total) {
        ul.remove();
        total.remove();
      }
      const cartItems = getStorage('cart_items');
      const cartSummary = getStorage('cart_summary');

      const cartTemplate = cartItems.length !== 0
      ? `<div class="stack-l">
          <ul class="narrow stack-l">
            ${cartItems.map(item => {
              const itemStock = stock.find(article => item.sku === article.sku);
              return `
              <li>
                <cart-item
                  data-lang="${this.dataset.lang}"
                  data-sku="${item.sku}"
                  data-stock="${itemStock.quantity}"
                  data-quantity="${item.quantity}"
                >
                  <div class="title tight">
                    <p><b>${item.title}</b></p>
                  </div>
                  <div class="controls">
                    <button
                      class="tight button button--light button--small"
                      data-operator="decrease"
                      title="${t('decreaseQuantity', this.dataset.lang, 'capitalize')}"
                    >-</button>
                    <span>${item.quantity}</span>
                    <button
                      class="tight button button--light button--small"
                      data-operator="increase"
                      title="${t('increaseQuantity', this.dataset.lang, 'capitalize')}"
                    >+</button>
                    <button
                      class="tight button button--light button--small"
                      data-operator="remove"
                      title="${t('removeArticle', this.dataset.lang, 'capitalize')}"
                    >
                      ${trashCanIcon}
                    </button>
                  </div>
                  <div class="price">
                    <p>CHF ${item.price * item.quantity}</p>
                  </div>
                </cart-item>
              </li>
            `}).join('')}
          </ul>
          <p class="total"><b>Total</b> <span>CHF ${cartSummary.totalPrice}</span></p>
        </div>`
        : `<p>${t('emptyCart', this.dataset.lang)}</p>`;

      render(cartTemplate, this);
    }

    async getStock() {
      const response = await fetch(`/api/get-stock`);
      const { stock } = await response.json();
      return stock;
    }
  }

  class CartItem extends HTMLElement {
    connectedCallback() {
      const buttons = this.querySelectorAll('[data-operator]');
      buttons.forEach(button => button.addEventListener('click', e => this.handleClick(e)));
      this.validateButtons();
    }
    
    validateButtons() {
      const { quantity: _quantity, stock: _stock, lang } = this.dataset;
      const quantity = Number(_quantity);
      const stock = Number(_stock);
      const increaseButton = this.querySelector('[data-operator="increase"]');
      const decreaseButton = this.querySelector('[data-operator="decrease"]');

      if (quantity >= stock) {
        increaseButton.setAttribute('disabled', 'true');
        const inputString = t('cannotOrderMore', lang);
        const message = replacer({ string: inputString, data: { maxQuantity: stock } });
        increaseButton.setAttribute('title', message);
      }

      if (quantity <= 1) {
        decreaseButton.setAttribute('disabled', 'true');
      }
    }

    handleClick(e) {
      const { operator } = e.target.dataset;
      const { sku } = this.dataset;
      switch (operator) {
        case 'increase':
          updateSku(sku, 'increase');
          break;
        case 'decrease':
          updateSku(sku, 'decrease');
          break;
        case 'remove':
          removeSku(sku);
        default:
          break;
      }
      this.validateButtons();
    }
  }

  customElements.define('cart-items', CartItems);
  customElements.define('cart-item', CartItem);
</script>