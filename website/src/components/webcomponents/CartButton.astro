---
const {
  lang,
  itemPrice,
  sku,
  stock,
  title,
} = Astro.props;
---

<cart-button
  class="stack-xs"
  data-lang={lang}
  data-item-price={itemPrice}
  data-sku={sku}
  data-static-stock={stock}
  data-title={title}
>
</cart-button>

<style lang="scss" is:global>
  cart-button {
    button[disabled=true] {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
</style>

<script>
  import { shoppingCartIcon } from '../../lib/icons';
  import { addSku, getSkuFromStorage } from '../../lib/localStorage';
  import { t } from '../../lib/translations';
  import { render, replacer } from '../../lib/utils';

  class CartButton extends HTMLElement {

    // global variable, keeps track of items in stock
    private _stock: number;

    constructor() {
      super();
      // initially use stale stock values from last build
      this._stock = this.staticStock;
    }

    // shorthand functions to get data
    get sku() {
      return this.dataset.sku;
    }

    get staticStock() {
      return Number(this.dataset.staticStock);
    }

    get lang() {
      return this.dataset.lang;
    }

    get addToCartButton() {
      return this.querySelector('#addToCart');
    }

    connectedCallback() {
      // do not render button if not in stock
      if (this.staticStock <= 0) {
        render(`<p>${t('outOfStock', this.lang)}</p>`, this);
        return;
      }

      // get current stock from api
      this.getStock().then(stock => this._stock = stock);

      // template used for rendering button
      const buttonTemplate = `
        <button
          id="addToCart"
          class="button button--light uppercase"
        >
          ${shoppingCartIcon}
          <span>${t('addToCart', this.lang, 'capitalize')}</span>
        </button>
      `;

      // render button inside <cart-button />
      render(buttonTemplate, this);

      // check if button should be enabled or not
      this.validateButton();

      // handle button click
      this.addToCartButton.addEventListener('click', () => (
        this.updateCart()
      ));
    }

    // add sku to localstorage and re-validate, if button should be still enabled
    updateCart() {
      addSku({
        itemPrice: Number(this.dataset.itemPrice),
        sku: this.sku,
        title: this.dataset.title,
      });

      this.validateButton();
    }

    // disable button, if more items in cart than in stock
    validateButton() {
      // try to read sku from cart
      const sku = getSkuFromStorage(this.sku);

      // if in cart, check if not more in cart than in stock
      if (sku && sku.quantity >= this._stock) {
        this.addToCartButton.setAttribute('disabled', 'true');
        const inputString = t('cannotOrderMore', this.lang);
        const message = replacer({ string: inputString, data: { maxQuantity: this._stock } });
        render(`<p>${message}</p>`, this.addToCartButton, 'insertAfter');
      }
    }

    // function to get current stock
    async getStock() {
      const response = await fetch(`/api/get-stock?sku=${this.sku}`);
      const { stock } = await response.json();
      return stock;
    }
  }

  customElements.define('cart-button', CartButton);
</script>
