---
const {
  lang,
  sku,
  stock,
} = Astro.props;
---

<cart-button
  class="stack-xs"
  data-lang={lang}
  data-sku={sku}
  data-static-stock={stock}
>
</cart-button>

<style lang="scss" is:global>
  cart-button {
    button[disabled=true] {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
</style>

<script>
  const { default: shoppingCartInnerHTML } = await import(`../../svg/shopping-cart.svg?raw`);
  const svg = (icon) => `
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg">
      ${icon}
    </svg>
  `;

  import { t } from '../../lib/translations';
  import { render } from '../../lib/utils';

  class CartButton extends HTMLElement {

    private _inCart: number;
    private _stock: number;

    constructor() {
      super();
      this._inCart = 0;
      this._stock = this.staticStock;
    }

    set inCart(value) {
      this._inCart = value;
    }

    get inCart() {
      return this._inCart;
    }

    get sku() {
      return this.dataset.sku;
    }

    get staticStock() {
      return Number(this.dataset.staticStock);
    }

    get lang() {
      return this.dataset.lang;
    }

    get addToCartButton() {
      return this.querySelector('#addToCart');
    }

    connectedCallback() {
      if (this.staticStock <= 0) {
        render(`<p>${t('outOfStock', this.lang)}</p>`, this);
        return;
      }

      const buttonTemplate = `
        <button
          id="addToCart"
          class="button button--light uppercase"
        >
          ${svg(shoppingCartInnerHTML)}
          <span>${t('addToCart', this.lang, 'capitalize')}</span>
        </button>
      `;

      render(buttonTemplate, this);

      this.addToCartButton.addEventListener('click', () => (
        this.updateCart()
      ));

      this.getStock().then(stock => (
        this._stock = stock,
        console.log(`updated _stock to: ${stock}`)
      ));
    }

    updateCart() {
      this._inCart++;

      // TODO: Add localStorage
      if(this._inCart >= this._stock) {
        this.addToCartButton.setAttribute('disabled', 'true');
        // TODO: FIX THIS
        render(`<p>Du kannst nur ${this._stock} St√ºcke bestellen</p>`, this.addToCartButton, 'insertAfter')
      }
    }

    async getStock() {
      const response = await fetch(`/api/get-stock?sku=${this.sku}`);
      const { stock } = await response.json();
      return stock;
    }
  }

  customElements.define('cart-button', CartButton);
</script>
