---
import Icon from '../Icon.astro';
import { t } from '../../lib/translations';

const {
  href,
  lang,
} = Astro.props;
---

<cart-icon>
  <a href={href} title={t('showCart', lang, 'capitalize')}>
    <div class="wrapper">
      <Icon name="shopping-cart" />
    </div>
  </a>
</cart-icon>

<style lang="scss" is:global>
  cart-icon {
    background: linear-gradient(90deg, rgba(14,14,14,0) 0%, rgba(14,14,14,0.8) 20%, rgb(14,14,14) 100%);
    bottom: 0;
    position: absolute;
    right: 0;
    top: 0;
    a {
      align-items: center;
      display: flex;
      flex-direction: row;
      height: 100%;
      padding-inline: var(--space-s);

      .wrapper {
        position: relative;

        &[data-cart-count]::before {
          content: attr(data-cart-count);
          display: block;
          background-color: var(--color-light-primary);
          border-radius: 777px;
          color: var(--color-dark-primary);
          font-size: 11px;
          line-height: 11px;
          padding: 5.5px 8px;
          position: absolute;
          right: 4px;
          top: 0;
        }
      }
    }
  }
</style>

<script>
  import { getStorage } from '../../lib/localStorage';
  
  class CartIcon extends HTMLElement {
    connectedCallback() {
      // update button if cart is modified
      document.addEventListener('modifiedCart', () => this.renderButton({initial: false}), false);
      this.renderButton({initial: true});
    }

    renderButton({initial}) {
      const cartSummary = getStorage('cart_summary');
      const cartCount = cartSummary && cartSummary.totalQuantity;
      const wrapper = this.querySelector('.wrapper') as HTMLElement;
      if (!initial) {
        this.classList.add('emphasis');
        setTimeout(() => {
          this.classList.remove('emphasis');
        }, 400);
      }
      if (cartCount) wrapper.dataset.cartCount = cartCount;
      if (!cartCount) wrapper.removeAttribute('data-cart-count');
    }
  }

  customElements.define('cart-icon', CartIcon);
</script>
