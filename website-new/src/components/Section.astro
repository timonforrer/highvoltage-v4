---
import {toHTML} from '@portabletext/to-html'
import Video from './Video.astro';
import getYoutubeId from 'get-youtube-id';
import Button from './Button.astro';
import Icon from './Icon.astro'
import Release from './Release.astro';
import ProductVariant from './ProductVariant.astro';
import InternalCollection from './InternalCollection.astro';

const Components = {
  productVariant: ProductVariant,
  release: Release,
  video: Video,
  internalCollection: InternalCollection,
};

const {
  blocks,
  cta,
  description,
  lang,
  layout: {
    columns,
    gap
  },
  renderTitle,
  title,
} = Astro.props;

const columnsClass = columns && `grid--${columns}-columns`;
const gapClass = gap && `grid--gap-${gap}`;

let pictureMediaSizes;

if (columns) {
  pictureMediaSizes =
    columns === 3 ? '(max-width): calc(100vw - 2em), 400px' :
    columns === 2 ? '(max-width): calc(100vw - 2em), 600px' :
    '(max-width): calc(100vw - 2em), 1200px';
}


---

<section class="stack-m">
  { (renderTitle || description) &&
    <div class="center">
      {renderTitle && <h2>{title}</h2>}
      {description && <Fragment set:html={toHTML(description)} /> }
    </div>
  }

  { blocks && 
    <div class:list={['center', 'grid', columnsClass, gapClass]}>
      {blocks.map(block => {
        const type = block._type;
        const Component = Components[type];
        
        if (Component === undefined) {
          return <p>No component specified for `{type}`</p>;
        }

        let attributes = {lang};

        if (type === 'video') {
          attributes['videoId'] = getYoutubeId(block.url)
        }

        return <Component {...block} {...attributes}></Component>
      })}
    </div>
  }

  { cta &&
    <div class="center right-aligned">
      <Button href={cta.slug}>{cta.title}<Icon name="chevron" /></Button>
    </div>
  }
</section>
