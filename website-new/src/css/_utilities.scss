@use 'variables';

.center {
  box-sizing: content-box;
  flex-basis: 70rem;
  max-inline-size: 70rem;
  margin-inline: auto;
  padding-inline: var(--space-s);
}

.center-v {
  align-items: center;
  display: flex;
  flex-direction: row;
}

@each $name, $value in variables.$spaces {
  .stack-#{$name} > * ~ * {
    margin-block-start: $value;
  }
}

.pin {
  inset: 0;
  position: absolute;
}

.grid {
  display: grid;
  &--gap-s {
    gap: var(--space-xs);
  }
  &--gap-m {
    gap: var(--space-m);
  }
  &--gap-l {
    gap: var(--space-l);
  }
}

@supports (width: min(250px, 100%)) {
  .grid {
    &--2-columns {
      grid-template-columns: repeat(auto-fit, minmax(min(450px, 100%), 1fr));
    }
    &--3-columns {
      grid-template-columns: repeat(auto-fit, minmax(min(250px, 100%), 1fr));
    }
    &--4-columns {
      grid-template-columns: repeat(auto-fit, minmax(min(120px, 100%), 1fr));
    }
  }
}

.right-aligned {
  text-align: right;
}

.breakout-link,
.breakout-button {
  &::before {
    height: 100%;
    width: 100%;
  }

  &::before,
  &::after {
    content: "";
    display: block;
    left: 0;
    position: absolute;
    top: 0;
  }
}

.breakout-link {
  &::after {
    background-color: transparent;
    border-radius: 4px;
    border: 2px solid;
    border-color: transparent;
    inset: 1em;
    transition: 200ms ease;
    transition-property: background-color, border-color, inset;
  }

  @media screen and (min-width: 600px) {
    &:hover::after,
    &:focus::after {
      background-color: rgba(255, 255, 255, 0.025);
      border-color: rgba(255, 255, 255, 0.15);
      inset: 0;
    }
  }
}

.hover-list {
  &__target {
    transition: 300ms ease;
    transition-property: opacity;
  }
  &:hover {
    & .hover-list__target {
      opacity: 0.5;
      &:hover {
        opacity: 1;
      }
    }
  }
}

.narrow {
  max-inline-size: 50rem;
}
